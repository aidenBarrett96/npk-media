'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

const NODE_HEADING = 'heading';
const NODE_CODEBLOCK = 'code_block';
const NODE_PARAGRAPH = 'paragraph';
const NODE_QUOTE = 'blockquote';
const NODE_OL = 'ordered_list';
const NODE_UL = 'bullet_list';
const NODE_LI = 'list_item';
const NODE_HR = 'horizontal_rule';
const NODE_BR = 'hard_break';
const NODE_IMAGE = 'image';
const MARK_BOLD = 'bold';
const MARK_ITALIC = 'italic';
const MARK_STRIKE = 'strike';
const MARK_UNDERLINE = 'underline';
const MARK_CODE = 'code';
const MARK_LINK = 'link';
const MARK_STYLED = 'styled';
function render(document, options = {}) {
  if (typeof document === 'object' && document.type === 'doc' && Array.isArray(document.content)) {
    const _options$blokResolver = options.blokResolvers,
          blokResolvers = _options$blokResolver === void 0 ? {} : _options$blokResolver,
          _options$defaultBlock = options.defaultBlockResolver,
          defaultBlockResolver = _options$defaultBlock === void 0 ? function () {
      return null;
    } : _options$defaultBlock,
          _options$nodeResolver = options.nodeResolvers,
          customNodeResolvers = _options$nodeResolver === void 0 ? {} : _options$nodeResolver,
          _options$markResolver = options.markResolvers,
          customMarkResolvers = _options$markResolver === void 0 ? {} : _options$markResolver;

    const nodeResolvers = _objectSpread2(_objectSpread2({}, defaultNodeResolvers), customNodeResolvers);

    const markResolvers = _objectSpread2(_objectSpread2({}, defaultMarkResolvers), customMarkResolvers);

    let currentKey = 0;

    const addKey = function (element) {
      return React.isValidElement(element) ? React.cloneElement(element, {
        key: currentKey++
      }) : element;
    };

    const renderNodes = function (nodes) {
      const elements = nodes ? nodes.map(renderNode).filter(function (node) {
        return node != null;
      }) : null;
      return Array.isArray(elements) && elements.length === 0 ? null : elements;
    };

    const renderNode = function (node) {
      if (node.type === 'blok') {
        const body = node.attrs.body;
        return body.map(function (_ref) {
          let component = _ref.component,
              props = _objectWithoutProperties(_ref, ["component"]);

          const resolver = blokResolvers[component];
          const element = resolver ? resolver(props) : defaultBlockResolver(component, props);
          return addKey(element);
        });
      } else if (node.type === 'text') {
        var _node$marks;

        const marks = (_node$marks = node.marks) !== null && _node$marks !== void 0 ? _node$marks : [];
        return marks.reduceRight(function (children, mark) {
          const resolver = markResolvers[mark.type];
          return resolver ? addKey(resolver(children, mark.attrs)) : children;
        }, node.text);
      } else {
        const resolver = nodeResolvers[node.type];
        return resolver ? addKey(resolver(renderNodes(node.content), node.attrs)) : null;
      }
    };

    return renderNodes(document.content);
  }

  return null;
}

const simpleNodeResolver = function (element) {
  return function (children) {
    return children != null ? React.createElement(element, null, children) : null;
  };
};

const emptyNodeResolver = function (element) {
  return function () {
    return React.createElement(element);
  };
};

const headingNodeResolver = function (children, props) {
  return React.createElement(`h${props.level}`, null, children);
};

const imageNodeResolver = function (children, props) {
  return React.createElement('img', props, children);
};

const codeblockNodeResolver = function (children, props) {
  const codeProps = {
    className: props.class
  };
  const code = React.createElement('code', codeProps, children);
  return React.createElement('pre', null, code);
};

const simpleMarkResolver = function (element) {
  return function (children) {
    return React.createElement(element, null, children);
  };
};

const linkMarkResolver = function (children, {
  href,
  target,
  linktype
}) {
  const props = {
    href: linktype === 'email' ? `mailto:${href}` : href,
    target
  };
  return React.createElement('a', props, children);
};

const styledMarkResolver = function (children, props) {
  return React.createElement('span', {
    className: props.class
  }, children);
};

const defaultNodeResolvers = {
  [NODE_HEADING]: headingNodeResolver,
  [NODE_CODEBLOCK]: codeblockNodeResolver,
  [NODE_IMAGE]: imageNodeResolver,
  [NODE_PARAGRAPH]: simpleNodeResolver('p'),
  [NODE_QUOTE]: simpleNodeResolver('blockquote'),
  [NODE_OL]: simpleNodeResolver('ol'),
  [NODE_UL]: simpleNodeResolver('ul'),
  [NODE_LI]: simpleNodeResolver('li'),
  [NODE_HR]: emptyNodeResolver('hr'),
  [NODE_BR]: emptyNodeResolver('br')
};
const defaultMarkResolvers = {
  [MARK_LINK]: linkMarkResolver,
  [MARK_STYLED]: styledMarkResolver,
  [MARK_BOLD]: simpleMarkResolver('b'),
  [MARK_ITALIC]: simpleMarkResolver('i'),
  [MARK_STRIKE]: simpleMarkResolver('s'),
  [MARK_UNDERLINE]: simpleMarkResolver('u'),
  [MARK_CODE]: simpleMarkResolver('code')
};

exports.MARK_BOLD = MARK_BOLD;
exports.MARK_CODE = MARK_CODE;
exports.MARK_ITALIC = MARK_ITALIC;
exports.MARK_LINK = MARK_LINK;
exports.MARK_STRIKE = MARK_STRIKE;
exports.MARK_STYLED = MARK_STYLED;
exports.MARK_UNDERLINE = MARK_UNDERLINE;
exports.NODE_BR = NODE_BR;
exports.NODE_CODEBLOCK = NODE_CODEBLOCK;
exports.NODE_HEADING = NODE_HEADING;
exports.NODE_HR = NODE_HR;
exports.NODE_IMAGE = NODE_IMAGE;
exports.NODE_LI = NODE_LI;
exports.NODE_OL = NODE_OL;
exports.NODE_PARAGRAPH = NODE_PARAGRAPH;
exports.NODE_QUOTE = NODE_QUOTE;
exports.NODE_UL = NODE_UL;
exports.render = render;
//# sourceMappingURL=index.js.map
